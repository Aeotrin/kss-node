var KssStyleguide, sectionQueryMatch;

/**
 * An instance of this class is returned on finishing `kss.traverse`.
 * Exposes convenience methods for interpreting data.
 *
 * @param {Object} data The data object generated by traverse.
 */
module.exports = KssStyleguide = function (data) {
	if (!(this instanceof KssStyleguide)) {
		return new KssStyleguide();
	}
	this.data = data || {};
	this.init();
};

KssStyleguide.prototype.init = function () {
	var i, l;
	if (this.data.sections) {
		// Set all the referenceURI values.
		l = this.data.sections.length;
		for (i = 0; i < l; i += 1) {
			this.data.sections[i].data.referenceURI = this.data.sections[i].encodeReferenceURI(this.data.sections[i].reference());
		}
		// Sort all the sections.
		this.sortSections();
	}
};

KssStyleguide.prototype.section = function(query) {
	var i, l = this.data.sections.length,
		current, isRegexSearch,
		sections = [];

	query = query || /.+/;

	// Exact queries.
	if (typeof query === 'string') {
		// If the query is '*', 'x', or ends with '.*', ' - *', '.x', or ' - x',
		// then it is not an exact query.
		isRegexSearch = query.match(/(^[x\*]$|\s\-\s[x\*]$|\.[x\*]$)/);
		if ( !isRegexSearch ) {
			if (this.data.section_refs && this.data.section_refs[query]) {
				return this.data.section_refs[query];
			} else {
				return false;
			}
		}
	}

	// Convert regex strings into proper JavaScript RegExp objects.
	if (!(query instanceof RegExp)) {
		query = new RegExp(
			query
				// Convert '*' to a simple .+ regex.
				.replace(/^\*$/, '.+')
				// Convert 'x' to a regex matching one level of reference.
				.replace(/^x$/, '[^\\.\\-]+')
				// Convert '.*' or ' - *' to a simple .* regex.
				.replace(/(\.|\s+\-\s+)\*$/g, '.*')
				// Convert the first '.x' or ' - x' to a regex matching one sub-level
				// of a reference.
				.replace(/(\.|\s+\-\s+)x\b/, '(\\.|\\s+\\-\\s+)[^\\.\\-]+')
				// Convert any remaining '.x' or ' - x' to a regex matching zero or one
				// sub-levels of a reference.
				.replace(/(\.|\s+\-\s+)x\b/g, '((\\.|\\s+\\-\\s+)[^\\.\\-]+){0,1}')
		);
	}

	// General (regex) search
	for (i = 0; i < l; i += 1) {
		current = this.data.sections[i];
		if (sectionQueryMatch(current.data.reference, query)) {
			sections.push(current);
		}
	}

	if (!sections) {
		return false;
	}

	return sections;
};

/**
 * Sorts the sections of the styleguide.
 *
 * This is called automatically as part of `Styleguide.init()` but is publicly
 * accessible as well.
 */
KssStyleguide.prototype.sortSections = function() {
	var thisStyleguide = this;

	// Sort sections based on reference number.
	this.data.sections.sort(function(a, b) {
		// Split the 2 references into chunks by their period or dash seperators.
		var refsA = a.data.reference.toLowerCase().split(/(?:\.|\s\-\s)/),
			refsB = b.data.reference.toLowerCase().split(/(?:\.|\s\-\s)/),
			rLengthA = refsA.length,
			rLengthB = refsB.length,
			i, l = Math.max(refsA.length, refsB.length);

		// Compare each set of chunks until we know which reference should be listed first.
		for (i = 0; i < l; i += 1) {
			if (refsA[i] && refsB[i]) {
				// If the 2 chunks are unequal, compare them.
				if (refsA[i] != refsB[i]) {
					// If both chunks are digits, use numeric sorting.
					if (refsA[i].match(/^\d+$/) && refsB[i].match(/^\d+$/)) {
						return refsA[i] - refsB[i];
					}
					// Otherwise, use alphabetical string sorting.
					else {
						return (refsA[i] > refsB[i]) ? 1 : -1;
					}
				}
			} else {
				// If 1 of the chunks is empty, it goes first.
				return refsA[i] ? 1 : -1;
			}
		}

		return 0;
	});
};

sectionQueryMatch = function(reference, query) {
	var match = reference.match(query);
	return match && match[0] === reference;
};
