#!/usr/bin/env node

/* eslint-disable no-process-exit */

'use strict';

var KssConfig = require('../lib/kss').KssConfig,
  yargs = require('yargs'),
  path = require('path'),
  version = require('../package.json').version;

var generator,
  KSS_GENERATING = false,
  KSS_FAILED = false,
  kssConfig = new KssConfig(),
  positionalParams;

// Set up error handling.
process.on('exit', function() {
  if (KSS_GENERATING && !KSS_FAILED) {
    if (kssConfig.get('verbose')) {
      console.log('');
    }
    console.log('Style guide generation completed successfully!');
  }
});

process.on('uncaughtException', function(err) {
  if (KSS_GENERATING) {
    console.log('\nError during generation\n');
  }
  console.log(err);

  KSS_FAILED = true;
  process.exit(1);
});

// Add options only needed by the CLI or yargs.
kssConfig.addOptions({
  'xdemo': {
    multiple: false,
    boolean: true,
    describe: 'Builds a KSS demo.',
    default: false
  },
  // Prevent yargs from complaining about JSON comments in the config file.
  '//': {
    string: true,
    describe: 'JSON configurations will ignore comments.',
    default: ''
  }
});

// The interaction between Yargs and KssConfig is delicate, so we add a
// convenience function to handle the details.
kssConfig.yargs = yargs;
kssConfig.setFromYargs = function(argv) {
  this.config = this.yargs(argv.slice(2)).options(this.options).argv;
  return this.yargs;
};
kssConfig.setFromYargs(process.argv);

// If the demo is requested, load the options from its config file.
if (kssConfig.get('xdemo')) {
  // Add the configuration file to the raw arguments list; otherwise, Yargs
  // won't read the config from the JSON file.
  process.argv.push('--config', path.join(__dirname, '../demo/kss-config.json'));
  kssConfig.setFromYargs(process.argv);

} else {
  positionalParams = kssConfig.get('_');
  // Check if the destination is the second unnamed parameter.
  if (positionalParams.length > 1) {
    process.argv.push('--destination', positionalParams[1]);
  }

  // Check if the source directory is the first unnamed parameter.
  if (positionalParams.length > 0) {
    process.argv.push('--source', positionalParams[0]);

    kssConfig.setFromYargs(process.argv);
  }
}

// Based on the template location specified in the generatorConfig, load the
// requested template's generator.
generator = kssConfig.loadGenerator();

// After the generator is loaded, we finally know all the options, so we tell
// yargs to ensure strictness (i.e. complain if the user tries to configure a
// non-existant option.
kssConfig.setFromYargs(process.argv)
  .strict()
  .wrap(80)
  // And make a help option available.
  .usage('Usage: kss-node [options]')
  .help('help')
    .alias('help', 'h')
    .alias('help', '?')
  .version(version, 'version');

// Clean up paths and massage options to expected types.
kssConfig.normalize();

// If requested, clone a template and exit.
if (kssConfig.get('init')) {
  console.log('Creating a new style guide template...');

  generator.clone(kssConfig.get('template'), kssConfig.get('init'), function(error) {
    if (error) {
      throw error;
    }

    console.log('You can change it as you like, and use it with your style guide like so:');
    console.log('kss-node [sourcedir] --template ' + kssConfig.get('init'));
  });
  return;
}

// If no source is specified, display help and exit.
if (!kssConfig.get('source').length) {
  console.log('Error: No --source specified.');
  yargs.showHelp();
  return;
}

// Parse and generate the static HTML pages in the next tick.
process.nextTick(function() {
  KSS_GENERATING = true;

  // Initialize the generator.
  /* eslint-disable max-nested-callbacks */
  generator.init(kssConfig.config, function(error) {
    if (error) {
      throw error;
    }

    // Then traverse the source and parse the files found.
    generator.parse(function(error, styleguide) {
      if (error) {
        throw error;
      }

      // Then generate the style guide.
      generator.generate(styleguide, function(error) {
        if (error) {
          throw error;
        }
        return true;
      });
    });
  });
});
