#!/usr/bin/env node

/*eslint-disable no-process-exit*/

'use strict';

var yargs = require('yargs'),
  path = require('path'),
  version = require('../package.json').version;

var generator,
  KSS_GENERATING = false,
  KSS_FAILED = false,
  generatorConfig,
  normalizeConfig,
  resolveArray,

  /*eslint-disable key-spacing*/
  cliOptions = {
    'init': {
      alias     : 'i',
      string    : true,
      path      : true,
      multiple  : false,
      describe  : 'Clone a style guide template to customize'
    },
    'template': {
      alias     : 't',
      string    : true,
      path      : true,
      multiple  : false,
      describe  : 'Use a custom template to build your style guide',
      default   : path.relative(process.cwd(), path.join(__dirname, '../generator/handlebars/template'))
    },
    'helpers': {
      string    : true,
      path      : true,
      describe  : 'Specify the location of custom handlebars helpers; see http://bit.ly/kss-helpers'
    },

    'mask': {
      alias     : 'm',
      string    : true,
      multiple  : false,
      describe  : 'Use a mask for detecting files containing KSS comments',
      default   : '*.css|*.less|*.sass|*.scss|*.styl|*.stylus'
    },

    'css': {
      string    : true,
      describe  : 'Specify the URL of a CSS file to include in the style guide'
    },
    'js': {
      string    : true,
      describe  : 'Specify the URL of a JavaScript file to include in the style guide'
    },

    'custom': {
      string    : true,
      describe  : 'Process a custom property name when parsing KSS comments'
    },

    'source': {
      string    : true,
      path      : true,
      describe  : 'Source directory to parse for KSS comments'
    },
    'destination': {
      string    : true,
      path      : true,
      multiple  : false,
      describe  : 'Destination directory of generated style guide',
      default   : 'styleguide'
    },

    'xdemo': {
      // Alias is redundant, but prevents "Unknown argument: xdemo" error.
      alias     : 'xdemo',
      multiple  : false,
      boolean   : true
    },
    // This option allows JSON comments in the config file.
    '//': {
      // Alias is redundant, but prevents "Unknown argument: //" error.
      alias     : '//',
      string    : true
    }
  };
  /*eslint-enable key-spacing*/

/**
 * Applies path.resolve() to the given path or array of paths.
 *
 * @param {string}        from  Optional path to resolve the "to" path
 * @param {string|array}  to    Relative path(s) to resolve.
 * @return {string} An absolute path.
 */
resolveArray = function(from, to) {
  var paths = [];
  // "from" is optional.
  if (typeof to === 'undefined') {
    to = from;
    from = '';
  }
  if (to instanceof Array) {
    to.forEach(function(value, index) {
      paths[index] = path.resolve(from, value);
    });
  } else {
    paths = path.resolve(from, to);
  }
  return paths;
};

/**
 * Cleans up a configuration object.
 *
 * @param {object} config Configuration object.
 * @return {object} The corrected configuration object
 */
normalizeConfig = function(config) {
  // If some of the options were specified in a JSON config file, determine
  // which ones by loading the keys from the config file.
  if (config.config) {
    // Save the full path to the config file.
    config.config = path.resolve(config.config);
    // Store the list of config file options for later.
    config.configFileOptions = Object.keys(require(config.config));
  } else {
    config.configFileOptions = [];
  }

  // Get the full source path.
  if (config.xdemo) {
    config.source = [path.join(__dirname, '../demo')];
    config.css = ['public/styles.css'];
  } else {
    if (!config.source) {
      config.source = [];
    }
    if (config._.length > 0) {
      config.source.push(config._[0]);
    }
  }

  // Check if the destination is the second unnamed parameter.
  if (config._.length > 1) {
    config.destination = config._[1];
  }

  // Normalize all the configuration options.
  for (var key in config) {
    if (typeof cliOptions[key] !== 'undefined') {
      // "multiple" defaults to true.
      if (typeof cliOptions[key].multiple === 'undefined') {
        cliOptions[key].multiple = true;
      }
      // "path" defaults to false.
      if (typeof cliOptions[key].path === 'undefined') {
        cliOptions[key].path = false;
      }
      // If an option is specified multiple times, yargs will convert it into an
      // array, but leave it as a string otherwise. This makes accessing the
      // values of options inconsistent, so make all other options an array.
      if (cliOptions[key].multiple) {
        if (typeof config[key] === 'undefined') {
          config[key] = [];
        } else if (!(config[key] instanceof Array)) {
          config[key] = [config[key]];
        }
      // For options marked as "multiple: false", use the first value specified,
      // ignoring the others.
      } else {
        if (config[key] instanceof Array) {
          config[key] = config[key].pop();
        }
      }
      // Resolve any paths relative to the config file or to the working directory.
      if (cliOptions[key].path) {
        if (config.configFileOptions.indexOf(key) > -1) {
          config[key] = resolveArray(path.dirname(config.config), config[key]);
        } else if (typeof config[key] !== 'undefined') {
          config[key] = resolveArray(config[key]);
        }
      }
    }
  }

  return config;
};

/**
 * Generator configuration.
 * @type {Object}
 */
generatorConfig = yargs
  .usage('Usage: kss-node <source> [destination] [options]')
  .wrap(80)
  .strict()
  .options(cliOptions)
  .config('config')
    .alias('config', 'c')
    .describe('config', 'Load the kss-node configuration from a json file')
  .help('help')
    .alias('help', 'h')
    .alias('help', '?')
  .version(version, 'version')
  .argv;

// Clean up paths and massage options to expected types.
generatorConfig = normalizeConfig(generatorConfig);

// Set up error handling.
process.on('exit', function() {
  if (KSS_GENERATING && !KSS_FAILED) {
    console.log('');
    console.log('Generation completed successfully!');
    console.log('');
  }
});

process.on('uncaughtException', function(err) {
  if (KSS_GENERATING) {
    console.log('\nError during generation\n');
  }
  console.log(err);

  KSS_FAILED = true;
  process.exit(1);
});


// If no source is specified, display help and exit.
if (!generatorConfig.source.length && !generatorConfig.init) {
  console.log('Error: No --source specified.');
  console.log('');
  yargs.showHelp();
  return;
}

// Load the template's generator.
try {
  generator = require(generatorConfig.template).generator;
} catch (e) {
  // Templates don't have to load their own generator. If the template fails to
  // load a generator, we assume it wanted the default generator.
  generator = require('../generator/handlebars');
}

// Confirm this is a compatible generator.
generator.checkGenerator();

// If requested, clone a template and exit.
if (generatorConfig.init) {
  console.log('Creating a new style guide template...');

  generator.clone(generatorConfig.template, generatorConfig.init);

  console.log('You can change it as you like, and use it with your style guide like so:');
  console.log('');
  console.log('kss-node [sourcedir] --template ' + generatorConfig.init);
  console.log('');
  return;
}

// Initialize the generator.
generator.init(generatorConfig);

// Parse and generate the static HTML pages in the next tick.
process.nextTick(function() {
  KSS_GENERATING = true;

  // We use a closure so we can use the generator object's methods and
  // properties when generator.generate() is used as a callback.
  generator.parse(
    (function(object) {
      return function() {
        object.generate.apply(object, arguments);
      };
    })(generator)
  );
});
